import { useEffect, useState } from "react";
import { useAgent } from "agents/react";
import { useAgentChat } from "agents/ai-react";
import type { UIMessage } from "ai";
import { APPROVAL } from "./shared";
import type { tools } from "./tools";

// Component imports
import { Button } from "@/components/button/Button";
import { Card } from "@/components/card/Card";
import { Input } from "@/components/input/Input";
import { Avatar } from "@/components/avatar/Avatar";
import { Toggle } from "@/components/toggle/Toggle";
import { Tooltip } from "@/components/tooltip/Tooltip";
import { SafeJSXRenderer } from "@/components/dynamic-renderer";
import { MarkdownRenderer } from "@/components/markdown";
import { FeedbackCollector } from "@/components/feedback/FeedbackCollector";
import { shouldEnableAutoGeneratedUI, shouldEnableFeedbackSystem, shouldEnableDebugMode } from "@/config/ui-config";
import { Message, MessageContent, MessageAvatar } from "@/components/ai-elements/message";
import { Response } from "@/components/ai-elements/response";
import { Actions, Action } from "@/components/ai-elements/actions";
import { 
  Conversation, 
  ConversationContent, 
  ConversationEmptyState,
  ConversationScrollButton 
} from "@/components/ai-elements/conversation";

// Icon imports
import {
  Bug,
  Moon,
  PaperPlaneRight,
  Robot,
  Sun,
  Trash,
} from "@phosphor-icons/react";

// List of tools that require human confirmation
const toolsRequiringConfirmation: (keyof typeof tools)[] = [
  "getWeatherInformation",
];

function getOrCreateAgentSessionId(): string {
  const key = "agentSessionId";
  let id = localStorage.getItem(key);
  if (!id) {
    id = crypto.randomUUID();
    localStorage.setItem(key, id);
  }
  return id;
}

// Extended message type to include UI components
interface ExtendedMessage extends UIMessage {
  uiComponent?: {
    componentType: string;
    jsx?: string;
    componentCode?: string;
    propsSchema?: Record<string, any>;
    props?: Record<string, any>;
  };
  isQuickResponse?: boolean;
  requestId?: string;
  processingTimeMs?: number;
}

// ChatMessage component for better code organization
interface ChatMessageProps {
  message: ExtendedMessage;
  index: number;
  messages: ExtendedMessage[];
  showDebug: boolean;
  onFeedback: (feedback: any) => void;
  onToolResult: (result: any) => void;
  toolsRequiringConfirmation: (keyof typeof tools)[];
}

function ChatMessage({
  message,
  index,
  messages,
  showDebug,
  onFeedback,
  onToolResult,
  toolsRequiringConfirmation,
}: ChatMessageProps) {
  const isUser = message.role === "user";
  const showAvatar = index === 0 || messages[index - 1]?.role !== message.role;

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
  };

  return (
    <div>
      {showDebug && (
        <pre className="text-xs text-muted-foreground overflow-scroll mb-2">
          {JSON.stringify(message, null, 2)}
        </pre>
      )}
      
      <Message from={message.role}>
        {showAvatar && (
          <MessageAvatar 
            src="" 
            name={isUser ? "You" : "AI"} 
          />
        )}
        
        <MessageContent>
          {message.parts?.map((part, i) => {
            if (part.type === "text") {
              return (
                <div key={i}>
                  <Response>
                    {part.text.replace(/^scheduled message: /, "")}
                  </Response>
                  
                  {/* Render UI Component if present and enabled */}
                  {!isUser && message.uiComponent && shouldEnableAutoGeneratedUI() && (
                    <div className="mt-3">
                      <SafeJSXRenderer 
                        component={message.uiComponent}
                        className="max-w-full"
                      />
                    </div>
                  )}
                  
                  <div className={`text-xs text-muted-foreground mt-1 ${
                    isUser ? "text-right" : "text-left"
                  }`}>
                    <div>{formatTime(new Date())}</div>
                    {message.processingTimeMs && (
                      <div className="text-blue-600 dark:text-blue-400">
                        Generated in {message.processingTimeMs}ms
                      </div>
                    )}
                  </div>
                  
                  {/* Add Feedback Actions for AI responses (if enabled) */}
                  {!isUser && shouldEnableFeedbackSystem() && (
                    <Actions className="mt-2">
                      <Action
                        tooltip="This response was helpful"
                        onClick={() => onFeedback({
                          messageId: message.id,
                          feedback: { thumbsUp: true, thumbsDown: false },
                          context: {
                            toolResults: [],
                            processingTime: message.processingTimeMs || 0,
                            model: 'gpt-4o',
                          }
                        })}
                      >
                        üëç
                      </Action>
                      <Action
                        tooltip="This response was not helpful"
                        onClick={() => onFeedback({
                          messageId: message.id,
                          feedback: { thumbsUp: false, thumbsDown: true },
                          context: {
                            toolResults: [],
                            processingTime: message.processingTimeMs || 0,
                            model: 'gpt-4o',
                          }
                        })}
                      >
                        üëé
                      </Action>
                    </Actions>
                  )}
                </div>
              );
            }

            if (part.type.startsWith("tool-")) {
              const toolName = part.type.replace("tool-", "");

              if (
                "toolCallId" in part &&
                "state" in part &&
                "input" in part &&
                toolsRequiringConfirmation.includes(
                  toolName as keyof typeof tools
                ) &&
                part.state === "input-available"
              ) {
                const toolCallId = part.toolCallId;
                return (
                  <Card
                    key={i}
                    className="p-4 my-3 rounded-md bg-neutral-100 dark:bg-neutral-900"
                  >
                    <div className="flex items-center gap-2 mb-3">
                      <div className="bg-[#F48120]/10 p-1.5 rounded-full">
                        <Robot
                          size={16}
                          className="text-[#F48120]"
                        />
                      </div>
                      <h4 className="font-medium">{toolName}</h4>
                    </div>

                    <div className="mb-3">
                      <h5 className="text-xs font-medium mb-1 text-muted-foreground">
                        Arguments:
                      </h5>
                      <pre className="bg-background/80 p-2 rounded-md text-xs overflow-auto">
                        {JSON.stringify(part.input, null, 2)}
                      </pre>
                    </div>

                    <div className="flex gap-2 justify-end">
                      <Button
                        variant="primary"
                        size="sm"
                        onClick={() =>
                          onToolResult({
                            toolCallId,
                            output: APPROVAL.NO,
                          })
                        }
                      >
                        Reject
                      </Button>
                      <Tooltip content={"Accept action"}>
                        <Button
                          variant="primary"
                          size="sm"
                          onClick={() =>
                            onToolResult({
                              toolCallId,
                              output: APPROVAL.YES,
                            })
                          }
                        >
                          Approve
                        </Button>
                      </Tooltip>
                    </div>
                  </Card>
                );
              }
              return null;
            }
            return null;
          })}
        </MessageContent>
      </Message>
    </div>
  );
}

export default function Chat() {
  const [theme, setTheme] = useState<"dark" | "light">(() => {
    // Check localStorage first, default to dark if not found
    const savedTheme = localStorage.getItem("theme");
    return (savedTheme as "dark" | "light") || "dark";
  });
  const [showDebug, setShowDebug] = useState(shouldEnableDebugMode());

  useEffect(() => {
    // Apply theme class on mount and when theme changes
    if (theme === "dark") {
      document.documentElement.classList.add("dark");
      document.documentElement.classList.remove("light");
    } else {
      document.documentElement.classList.remove("dark");
      document.documentElement.classList.add("light");
    }

    // Save theme preference to localStorage
    localStorage.setItem("theme", theme);
  }, [theme]);

  const toggleTheme = () => {
    const newTheme = theme === "dark" ? "light" : "dark";
    setTheme(newTheme);
  };

  const agentSessionId = getOrCreateAgentSessionId();

  const agent = useAgent({
    agent: "chat",
    name: agentSessionId,
        onMessage: (message) => {
          console.log("Received message from agent:", message);
          try {
            const data = JSON.parse(message.data);
            if (data.type === "response") {
              const agentMessage: ExtendedMessage = {
                id: data.requestId || Date.now().toString(),
                role: "assistant" as const,
                parts: [{ type: "text" as const, text: data.content }],
                isQuickResponse: data.isQuickResponse,
                requestId: data.requestId,
                processingTimeMs: data.processingTimeMs,
              };

              // Add UI component if present in the response
              if (data.uiComponent) {
                console.log("üé® UI Component received:", data.uiComponent);
                agentMessage.uiComponent = data.uiComponent;
              }

              if (data.isQuickResponse) {
                // Add quick response immediately
                setMessages(prev => [...prev, agentMessage]);
                console.log("‚ö° Quick response received");
              } else {
                // Replace or add detailed response
                setMessages(prev => {
                  // Remove any existing quick response for this requestId
                  const filtered = prev.filter(m => 
                    !(m as ExtendedMessage).requestId || 
                    (m as ExtendedMessage).requestId !== data.requestId ||
                    !(m as ExtendedMessage).isQuickResponse
                  );
                  return [...filtered, agentMessage];
                });
                console.log("üìä Detailed response received");
              }
            }
          } catch (error) {
            console.error("Error parsing agent message:", error);
          }
        },
  });

  const {
    messages: agentMessages,
    setMessages,
    error,
    id,
  } = useAgentChat({
    agent,
  });

  // For AI SDK v5, we need to manage input state ourselves
  const [agentInput, setAgentInput] = useState("");

  const handleAgentInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setAgentInput(e.target.value);
  };

  const handleAgentSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!agentInput.trim()) return;
    
    // Add user message using the new UIMessage format
    const userMessage = {
      id: Date.now().toString(),
      role: "user" as const,
      parts: [{ type: "text" as const, text: agentInput }],
    };
    
    setMessages(prev => [...prev, userMessage]);
    
    // Send message to agent via WebSocket
    const messageToSend = {
      type: "chat",
      content: agentInput,
      timestamp: Date.now(),
    };
    
    agent.send(JSON.stringify(messageToSend));
    setAgentInput("");
  };

  // Mock functions for compatibility
  const addToolResult = (result: any) => {
    console.log("addToolResult called with:", result);
    // TODO: Implement tool result handling
  };

  const clearHistory = () => {
    setMessages([]);
  };

  // Handle feedback submission
  const handleFeedback = async (feedback: any) => {
    console.log('üìù Feedback received:', feedback);
    
    // Here you would typically send the feedback to your backend
    // For now, we'll just log it and could send it to Amplitude
    try {
      // You can add API call to store feedback here
      // await fetch('/api/feedback', { method: 'POST', body: JSON.stringify(feedback) });
      console.log('‚úÖ Feedback processed successfully');
    } catch (error) {
      console.error('‚ùå Error processing feedback:', error);
    }
  };

  // Debug logging
  console.log("useAgentChat result:", { messages: agentMessages, setMessages, error, id });

  const pendingToolCallConfirmation = agentMessages.some((m: UIMessage) =>
    m.parts?.some(
      (part) =>
        part.type.startsWith("tool-") &&
        "state" in part &&
        part.state === "input-available" &&
        toolsRequiringConfirmation.includes(
          part.type.replace("tool-", "") as keyof typeof tools
        )
    )
  );

  return (
    <div className="h-[100vh] w-full p-4 flex justify-center items-center bg-fixed overflow-hidden">
      <div className="h-[calc(100vh-2rem)] w-full mx-auto max-w-6xl flex flex-col shadow-xl rounded-md overflow-hidden relative border border-neutral-300 dark:border-neutral-800">
        <div className="px-4 py-3 border-b border-neutral-300 dark:border-neutral-800 flex items-center gap-3 sticky top-0 z-10">
          <div className="flex items-center justify-center h-8 w-8">
            <svg
              width="28px"
              height="28px"
              className="text-[#F48120]"
              data-icon="agents"
            >
              <title>My Token Agent</title>
              <symbol id="ai:local:agents" viewBox="0 0 80 79">
                <path
                  fill="currentColor"
                  d="M69.3 39.7c-3.1 0-5.8 2.1-6.7 5H48.3V34h4.6l4.5-2.5c1.1.8 2.5 1.2 3.9 1.2 3.8 0 7-3.1 7-7s-3.1-7-7-7-7 3.1-7 7c0 .9.2 1.8.5 2.6L51.9 30h-3.5V18.8h-.1c-1.3-1-2.9-1.6-4.5-1.9h-.2c-1.9-.3-3.9-.1-5.8.6-.4.1-.8.3-1.2.5h-.1c-.1.1-.2.1-.3.2-1.7 1-3 2.4-4 4 0 .1-.1.2-.1.2l-.3.6c0 .1-.1.1-.1.2v.1h-.6c-2.9 0-5.7 1.2-7.7 3.2-2.1 2-3.2 4.8-3.2 7.7 0 .7.1 1.4.2 2.1-1.3.9-2.4 2.1-3.2 3.5s-1.2 2.9-1.4 4.5c-.1 1.6.1 3.2.7 4.7s1.5 2.9 2.6 4c-.8 1.8-1.2 3.7-1.1 5.6 0 1.9.5 3.8 1.4 5.6s2.1 3.2 3.6 4.4c1.3 1 2.7 1.7 4.3 2.2v-.1q2.25.75 4.8.6h.1c0 .1.1.1.1.1.9 1.7 2.3 3 4 4 .1.1.2.1.3.2h.1c.4.2.8.4 1.2.5 1.4.6 3 .8 4.5.7.4 0 .8-.1 1.3-.1h.1c1.6-.3 3.1-.9 4.5-1.9V62.9h3.5l3.1 1.7c-.3.8-.5 1.7-.5 2.6 0 3.8 3.1 7 7 7s7-3.1 7-7-3.1-7-7-7c-1.5 0-2.8.5-3.9 1.2l-4.6-2.5h-4.6V48.7h14.3c.9 2.9 3.5 5 6.7 5 3.8 0 7-3.1 7-7s-3.1-7-7-7m-7.9-16.9c1.6 0 3 1.3 3 3s-1.3 3-3 3-3-1.3-3-3 1.4-3 3-3m0 41.4c1.6 0 3 1.3 3 3s-1.3 3-3 3-3-1.3-3-3 1.4-3 3-3M44.3 72c-.4.2-.7.3-1.1.3-.2 0-.4.1-.5.1h-.2c-.9.1-1.7 0-2.6-.3-1-.3-1.9-.9-2.7-1.7-.7-.8-1.3-1.7-1.6-2.7l-.3-1.5v-.7q0-.75.3-1.5c.1-.2.1-.4.2-.7s.3-.6.5-.9c0-.1.1-.1.1-.2.1-.1.1-.2.2-.3s.1-.2.2-.3c0 0 0-.1.1-.1l.6-.6-2.7-3.5c-1.3 1.1-2.3 2.4-2.9 3.9-.2.4-.4.9-.5 1.3v.1c-.1.2-.1.4-.1.6-.3 1.1-.4 2.3-.3 3.4-.3 0-.7 0-1-.1-2.2-.4-4.2-1.5-5.5-3.2-1.4-1.7-2-3.9-1.8-6.1q.15-1.2.6-2.4l.3-.6c.1-.2.2-.4.3-.5 0 0 0-.1.1-.1.4-.7.9-1.3 1.5-1.9 1.6-1.5 3.8-2.3 6-2.3q1.05 0 2.1.3v-4.5c-.7-.1-1.4-.2-2.1-.2-1.8 0-3.5.4-5.2 1.1-.7.3-1.3.6-1.9 1s-1.1.8-1.7 1.3c-.3.2-.5.5-.8.8-.6-.8-1-1.6-1.3-2.6-.2-1-.2-2 0-2.9.2-1 .6-1.9 1.3-2.6.6-.8 1.4-1.4 2.3-1.8l1.8-.9-.7-1.9c-.4-1-.5-2.1-.4-3.1s.5-2.1 1.1-2.9q.9-1.35 2.4-2.1c.9-.5 2-.8 3-.7.5 0 1 .1 1.5.2 1 .2 1.8.7 2.6 1.3s1.4 1.4 1.8 2.3l4.1-1.5c-.9-2-2.3-3.7-4.2-4.9q-.6-.3-.9-.6c.4-.7 1-1.4 1.6-1.9.8-.7 1.8-1.1 2.9-1.3.9-.2 1.7-.1 2.6 0 .4.1.7.2 1.1.3V72zm25-22.3c-1.6 0-3-1.3-3-3 0-1.6 1.3-3 3-3s3 1.3 3 3c0 1.6-1.3 3-3 3"
                />
              </symbol>
              <use href="#ai:local:agents" />
            </svg>
          </div>

          <div className="flex-1">
            <h2 className="font-semibold text-base">My Token Agent</h2>
          </div>

          {shouldEnableDebugMode() && (
            <div className="flex items-center gap-2 mr-2">
              <Bug size={16} />
              <Toggle
                toggled={showDebug}
                aria-label="Toggle debug mode"
                onClick={() => setShowDebug((prev) => !prev)}
              />
            </div>
          )}

          <Button
            variant="ghost"
            size="md"
            shape="square"
            className="rounded-full h-9 w-9"
            onClick={toggleTheme}
          >
            {theme === "dark" ? <Sun size={20} /> : <Moon size={20} />}
          </Button>

          <Button
            variant="ghost"
            size="md"
            shape="square"
            className="rounded-full h-9 w-9"
            onClick={clearHistory}
          >
            <Trash size={20} />
          </Button>
        </div>

        {/* Messages */}
        <Conversation className="flex-1">
          <ConversationContent>
            {agentMessages.length === 0 ? (
              <ConversationEmptyState
                title="Welcome to your AI Token Agent"
                description="Ask me about any token, chain, wallet, or DeFi protocol"
                icon={
                  <div className="bg-[#F48120]/10 text-[#F48120] rounded-full p-3 inline-flex">
                    <Robot size={24} />
                  </div>
                }
              >
                <div className="space-y-4">
                  <p className="text-muted-foreground text-sm">
                    Try asking about:
                  </p>
                  <ul className="text-sm text-left space-y-2">
                    <li className="flex items-center gap-2">
                      <span className="text-[#F48120]">‚Ä¢</span>
                      <span>What's the current price of aero on base?</span>
                    </li>
                    <li className="flex items-center gap-2">
                      <span className="text-[#F48120]">‚Ä¢</span>
                      <span>What's a great token under $100m mcap to buy?</span>
                    </li>
                  </ul>
                </div>
              </ConversationEmptyState>
            ) : (
              agentMessages.map((m: ExtendedMessage, index: number) => (
                <ChatMessage
                  key={m.id}
                  message={m}
                  index={index}
                  messages={agentMessages}
                  showDebug={showDebug}
                  onFeedback={handleFeedback}
                  onToolResult={addToolResult}
                  toolsRequiringConfirmation={toolsRequiringConfirmation}
                />
              ))
            )}
          </ConversationContent>
          <ConversationScrollButton />
        </Conversation>

        {/* Input Area */}
        <form
          onSubmit={handleAgentSubmit}
          className="p-3 bg-input-background absolute bottom-0 left-0 right-0 z-10 border-t border-neutral-300 dark:border-neutral-800"
        >
          <div className="flex items-center gap-2">
            <div className="flex-1 relative">
              <Input
                disabled={pendingToolCallConfirmation}
                placeholder={
                  pendingToolCallConfirmation
                    ? "Please respond to the tool confirmation above..."
                    : "Type your message..."
                }
                className="pl-4 pr-10 py-2 w-full rounded-full"
                value={agentInput || ""}
                onChange={handleAgentInputChange}
                onKeyDown={(e) => {
                  if (e.key === "Enter" && !e.shiftKey) {
                    e.preventDefault();
                    handleAgentSubmit(e as unknown as React.FormEvent);
                  }
                }}
                onValueChange={undefined}
              />
            </div>

            <Button
              type="submit"
              shape="square"
              className="rounded-full h-10 w-10 flex-shrink-0"
              disabled={pendingToolCallConfirmation || !agentInput?.trim()}
            >
              <PaperPlaneRight size={16} />
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
}
