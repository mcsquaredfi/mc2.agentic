/**
 * Test file for UI configuration
 * This verifies that the configuration system works correctly
 */

import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import { 
  defaultUIConfig, 
  getUIConfig, 
  shouldEnableAutoGeneratedUI,
  shouldEnableDebugMode,
  shouldEnableFeedbackSystem,
  shouldEnableAIElements,
  getServerUIConfig,
  updateClientUIConfig
} from './ui-config';

// Mock localStorage for testing
const localStorageMock = {
  getItem: vi.fn(),
  setItem: vi.fn(),
  removeItem: vi.fn(),
  clear: vi.fn(),
};

// Mock window object
Object.defineProperty(window, 'localStorage', {
  value: localStorageMock,
});

describe('UI Configuration', () => {
  beforeEach(() => {
    // Reset localStorage mock
    localStorageMock.getItem.mockClear();
    localStorageMock.setItem.mockClear();
  });

  afterEach(() => {
    // Clean up any localStorage overrides
    localStorageMock.getItem.mockReturnValue(null);
  });

  describe('Default Configuration', () => {
    it('should have correct default values', () => {
      expect(defaultUIConfig.enableAutoGeneratedUI).toBe(false);
      expect(defaultUIConfig.enableDebugMode).toBe(false);
      expect(defaultUIConfig.enableFeedbackSystem).toBe(true);
      expect(defaultUIConfig.enableAIElements).toBe(true);
    });
  });

  describe('Client-Side Configuration', () => {
    it('should return default config when no localStorage overrides', () => {
      localStorageMock.getItem.mockReturnValue(null);
      
      const config = getUIConfig();
      expect(config).toEqual(defaultUIConfig);
    });

    it('should use localStorage overrides when available', () => {
      localStorageMock.getItem
        .mockReturnValueOnce('true')  // ENABLE_AUTO_GENERATED_UI
        .mockReturnValueOnce('true')  // ENABLE_DEBUG_MODE
        .mockReturnValueOnce('false') // ENABLE_FEEDBACK_SYSTEM
        .mockReturnValueOnce('false'); // ENABLE_AI_ELEMENTS

      const config = getUIConfig();
      
      expect(config.enableAutoGeneratedUI).toBe(true);
      expect(config.enableDebugMode).toBe(true);
      expect(config.enableFeedbackSystem).toBe(false);
      expect(config.enableAIElements).toBe(false);
    });

    it('should provide correct helper function results', () => {
      localStorageMock.getItem.mockReturnValue(null);
      
      expect(shouldEnableAutoGeneratedUI()).toBe(false);
      expect(shouldEnableDebugMode()).toBe(false);
      expect(shouldEnableFeedbackSystem()).toBe(true);
      expect(shouldEnableAIElements()).toBe(true);
    });
  });

  describe('Server-Side Configuration', () => {
    it('should use environment variables when available', () => {
      const mockEnv = {
        ENABLE_AUTO_GENERATED_UI: 'true',
        ENABLE_DEBUG_MODE: 'true',
        ENABLE_FEEDBACK_SYSTEM: 'false',
        ENABLE_AI_ELEMENTS: 'false',
      };

      const config = getServerUIConfig(mockEnv);
      
      expect(config.enableAutoGeneratedUI).toBe(true);
      expect(config.enableDebugMode).toBe(true);
      expect(config.enableFeedbackSystem).toBe(false);
      expect(config.enableAIElements).toBe(false);
    });

    it('should fall back to defaults when env vars not set', () => {
      const config = getServerUIConfig({});
      
      expect(config).toEqual(defaultUIConfig);
    });
  });

  describe('Client Configuration Updates', () => {
    it('should update localStorage with new values', () => {
      const newConfig = {
        enableAutoGeneratedUI: true,
        enableDebugMode: true,
      };

      updateClientUIConfig(newConfig);

      expect(localStorageMock.setItem).toHaveBeenCalledWith('ENABLE_AUTO_GENERATED_UI', 'true');
      expect(localStorageMock.setItem).toHaveBeenCalledWith('ENABLE_DEBUG_MODE', 'true');
    });

    it('should handle undefined values gracefully', () => {
      const newConfig = {
        enableAutoGeneratedUI: undefined,
        enableDebugMode: true,
      };

      updateClientUIConfig(newConfig);

      expect(localStorageMock.setItem).toHaveBeenCalledTimes(1);
      expect(localStorageMock.setItem).toHaveBeenCalledWith('ENABLE_DEBUG_MODE', 'true');
    });
  });
});
